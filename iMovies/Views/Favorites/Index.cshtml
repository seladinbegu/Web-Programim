<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Favorites</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
        }

        .movie-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            padding: 20px;
        }

        .movie-card {
            width: 250px;
            height: 400px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.3s ease;
            cursor: pointer;
        }

        .movie-card:hover {
            transform: scale(1.05);
        }

        .movie-img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
        }

        .movie-info {
            padding: 10px;
        }

        .movie-info h3 {
            font-size: 18px;
            margin: 0;
            color: #333;
        }

        .movie-info p {
            font-size: 14px;
            color: #777;
            margin-top: 5px;
        }

        .movie-info .genre {
            font-weight: bold;
            color: #555;
        }

        .movie-info .duration {
            color: #999;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }

        .pagination button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 0 5px;
            cursor: pointer;
            border-radius: 5px;
        }

        .pagination button:disabled {
            background-color: #ddd;
            cursor: not-allowed;
        }
    </style>
</head>

<body>
    <div class="movie-container" id="movieContainer"></div>

    <div class="pagination" id="pagination"></div>

    <script>
        // Utility function to get cookie by name
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);

            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        // Fetch the userName from cookies
        const userName = getCookie("userName");
        console.log('Username is: ' + userName);

        // Fetch the userId based on the userName
        function getUserIdByUsername(username) {
            fetch(`http://localhost:5238/api/Auth/get-user-id/${username}`)
                .then(response => response.json())
                .then(data => {
                    if (data.userId) {
                        console.log("User ID: ", data.userId);
                        fetchFavorites(data.userId);
                    } else {
                        console.log("User not found");
                    }
                })
                .catch(error => {
                    console.error("Error fetching userId: ", error);
                });
        }

        // Fetch user's favorite movies
        let allMovies = [];
        let currentPage = 1;
        const moviesPerPage = 3;

        function fetchFavorites(userId) {
            const token = getCookie('accessToken'); // Get token here to pass with the request
            if (!token) {  // Check if the token is null or empty
                if (confirm("You need to log in to see your favorite movies! Click OK to log in.")) {
                    window.location.href = '@Url.Action("Login", "Account")'; // Redirect to the login page using the provided URL
                }
                return; // Stop the function if there is no token
            }
            console.log("Token:", token);

            fetch(`http://localhost:5238/api/movieuser/user-favorites/${userId}`, {
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`  // Include the token in the Authorization header
                }
            })
                .then(response => response.json())
                .then(data => {
                    console.log("Fetched Movies: ", data); // Debugging log
                    if (Array.isArray(data)) {
                        allMovies = data;
                        displayMovies(currentPage);
                        updatePagination();
                    } else {
                        console.error("Data is not an array", data);
                    }
                })
                .catch(error => {
                    console.error("Error fetching favorites: ", error);
                });
        }

        // Display movie cards for the current page
        function displayMovies(page) {
            const movieContainer = document.getElementById('movieContainer');
            movieContainer.innerHTML = '';  // Clear any previous content

            // Get the subset of movies for the current page
            const start = (page - 1) * moviesPerPage;
            const end = start + moviesPerPage;
            const moviesToDisplay = allMovies.slice(start, end);

            if (moviesToDisplay.length === 0) {
                movieContainer.innerHTML = '<p>No favorite movies found.</p>';
            }

            // Loop through the movies and create movie cards
            moviesToDisplay.forEach(movie => {
                console.log('Movie Data:', movie);  // Check the movie object to ensure movie.id exists
                const movieCard = document.createElement('div');
                movieCard.classList.add('movie-card');
                movieCard.setAttribute('data-movie-id', movie.id); // Use movie.id (ensure id is returned)

                movieCard.innerHTML = `
                    <img src="${movie.imgPath}" alt="${movie.name}" class="movie-img">
                    <div class="movie-info">
                        <h3>${movie.name}</h3>
                        <p class="genre">${movie.genre}</p>
                        <p class="duration">${movie.duration}</p>
                    </div>
                `;

                // Event listener for removing the movie from favorites on double-click
                movieCard.addEventListener('dblclick', () => {
                    const movieId = movie.id; // Use movie.id (ensure id is returned)
                    console.log("Movie ID:", movieId);  // Log movieId value before calling removeFromFavorites

                    const movieName = movie.name;
                    const confirmation = confirm(`Are you sure you want to remove "${movieName}" from your favorites?`);

                    if (confirmation) {
                        removeFromFavorites(movieId, userId);  // Call remove function with valid movieId
                    }
                });

                movieContainer.appendChild(movieCard);
            });
        }

        // Update the pagination buttons
        function updatePagination() {
            const paginationContainer = document.getElementById('pagination');
            paginationContainer.innerHTML = '';  // Clear any previous content

            const totalPages = Math.ceil(allMovies.length / moviesPerPage);

            const prevButton = document.createElement('button');
            prevButton.textContent = 'Previous';
            prevButton.disabled = currentPage === 1;
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayMovies(currentPage);
                    updatePagination();
                }
            });
            paginationContainer.appendChild(prevButton);

            const nextButton = document.createElement('button');
            nextButton.textContent = 'Next';
            nextButton.disabled = currentPage === totalPages;
            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    displayMovies(currentPage);
                    updatePagination();
                }
            });
            paginationContainer.appendChild(nextButton);
        }

        // Remove movie from favorites
        function removeFromFavorites(movieId, userId) {
            const token = getCookie('accessToken');
            if (!token) {
                alert("No token found! Please login again.");
                return;
            }

            console.log(`Removing movie ID: ${movieId} for user ID: ${userId}`);  // Log for debugging

            const url = `http://localhost:5238/api/movieuser/remove-favorite/${movieId}/${userId}`;
            fetch(url, {
                method: 'DELETE',
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                }
            })
                .then(response => {
                    console.log("Response status:", response.status);  // Log response status
                    if (response.ok) {
                        alert('Movie removed from favorites');

                        // Remove the movie card manually
                        const movieCard = document.querySelector(`[data-movie-id="${movieId}"]`);
                        if (movieCard) {
                            movieCard.remove();
                        }
                    } else {
                        console.error('Error response:', response);
                    }
                })
                .catch(error => {
                    console.error("Error removing favorite: ", error);
                    alert("Error removing favorite movie.");
                });
        }

        // Initialize the process
        getUserIdByUsername(userName);
    </script>
</body>

</html>
